MMDAI - MMDAI is a fork project of MMDAgent (http://www.mmdagent.jp)

* What's this?
MMDAI とは MMDAgent からフォークしたプロジェクトです。
主な目的はクロスプラットフォームで動かせるようにすることです。
(MMDAgent は Win32 API に強く依存する設計になっているため)

現在プラグインの移植中のため、モデル表示とモーションの動作は可能ですが、
音声を認識して喋らせることは出来ません。

* Supported OS
以下は開発者の環境で保証されている環境です。
MacOSX 10.6 64bit
Fedora 14 32bit
Ubuntu 10.10 64bit

Windows に関して MinGW を使うことでビルドすることが出来ますが、
まだ本物の Windows で実行していないため、未検証です。
(Fedora14 のクロスコンパイル環境を使ってビルドし、wineで一応実行可能なことは確認)

* How to use?
オリジナルの MMDAgent とあわせていますが、現時点で一部の動作のみ実装しています。

** メニューからの操作
キーボード、マウス、及びドラッグアンドドロップの操作は基本的にここでも可能です。

- File
-- Add Motion
--- Insert to the all models -> 全てのモデルに対してモーションを適用
--- Insert to the selected model -> 選択されたモデルに対してモーションを適用。選択されていなければ何もしない
-- Add Model -> モデルを追加
-- Set Stage -> ステージを変更
-- Set Floor -> フロアーを変更
-- Set Background -> 背景を変更
-- Exit -> アプリケーションの終了
- Stage
-- Increase edge thin
-- Decrease edge thin
-- Toggle display bone
-- Toggle rigid body
-- Toggle physic simulation
-- Toggle shadow mapping
-- Toggle shadow mapping light first
- Model
-- Zoom in
-- Zoom out
-- Rotate up
-- Rotate down
-- Rotate left
-- Rotate right
-- Translate up
-- Translate down
-- Translate left
-- Translate right
-- Delete selected model

** キーボードでの操作
- ↑  -> カメラビューを上に回転
- ↓  -> カメラビューを下に回転
- ← -> カメラビューを左に回転
- →  -> カメラビューを右に回転
- CTRL + ↑  -> カメラビューを上に移動
- CTRL + ↓  -> カメラビューを下に移動
- CTRL + ← -> カメラビューを左に移動
- CTRL +  → -> カメラビュー右に移動
- B -> 全てのモデルのボーンの表示
- P -> 物理エンジンの有効/無効
- ALT + ? or ALT + / -> アプリケーションについてのダイアログの表示
- + -> カメラビューの拡大
- - -> カメラビューの縮小
- DELETE -> 選択されたモデルの削除。選択されていなければなにもしない
- ESCAPE -> アプリケーションの終了

** マウスを使った操作

- ドラッグ -> カメラビューの回転
- SHIFT を押しながらのドラッグ -> カメラビューの平行移動
- ホイール操作 -> カメラビューの拡大及び縮小
- CTRL を押しながらホイール操作 -> 高速なカメラビューの拡大縮小
- SHIFT を押しながらホイール操作 -> 低速なカメラビューの拡大縮小
- SHIFT + CTRL を押しながらのドラッグ -> 光源の移動
- CTRL を押しながらモデルをドラッグ -> モデルの平行移動
- モデルのダブルクリック -> モデルの選択

** ドラッグ and ドロップ

- PMD ファイル -> モーションを維持しながら選択されたモデルを変更
- CTRL を押しながら PMD ファイル -> モデルを追加(最大20まで)
- VMD ファイル -> 選択されたモデルに対してモーションを追加
- CTRL を押しながら VMD ファイル -> 全てのモデルに対してモーションを追加
- XPMD ファイル -> ステージを変更
- BMP/TGA/PNG ファイル -> フロアのテクスチャを変更
- CTRL を押しながら BMP/TGA/PNG ファイル -> 背景のテクスチャを変更

* How to build?
まず必要なライブラリが入っているかどうかを確認して下さい。
- Bullet Physics
- OpenGL Easy Extension
- Qt 4.7 以降

MMDAI 及び MMDFiles のビルドに cmake が必要です。MacOSX の場合はさらに Xcode が必要です。
Xcode をインストールしないと gcc 等が入らないので必ずインストールしてください。

MacOSX の場合 OpenGL Easy Extension が正しくビルド出来無い問題があるため、
libGLEE に入っている CMakeList.txt を入れて cmake を使ってビルドする必要があります。
インストール先は /usr または /usr/local にインストールする必要があります。
Ubuntu Linux の場合、apt-get でインストールした方が楽です。

** building OpenGL Easy Extension using cmake
$ cp $MMDAI/libGLEE/CMakeFiles.txt $GLEE_SRC_DIR
$ mv GLee.c glee.c
$ cmake .
$ make
$ sudo make install

** Linux or MacOSX
$ cd libMMDFiles
$ cmake .
$ make 
$ sudo make install
$ cd ../libMMDAI
$ cmake .
$ make
$ sudo make install
$ cd ..
$ qmake
$ make # MacOSX の場合は xcodebuild

** MinGW
Linux 上でクロスコンパイルを行います。yum で MinGW の開発環境が揃えられる
Fedora Linux でビルドしたほうがよいかもしれません。
以下の解説は Fedora Linux 14 を使った場合でのビルド方法です。

*** OpenGL Easy Extension
cmake を使います。mingw32-cmake を使うこと以外方法は同じです。

*** Bullet Physics
一旦トップディレクトリで mingw32-cmake を実行します。その後 src ディレクトリに移動し、
make を実行します。ビルド出来たら make install を実行します。

*** MMDFiles / MMDAI
mingw32-cmake を使うこと以外方法は同じです。OpenGL Easy Extension と
Bullet Physics の二つがインストールされていることが前提条件です。

*** QtMMDAI
qmake-qt4 の代わりに mingw32-qmake-qt4 を使う必要があります。
mingw32-qmake-qt4 を実行し、make すればバイナリが作成されます。
生成されたバイナリは debug または release の QtMMDAI.exe になります。

実行する際 dll が必要なため、以下で dll をシンボリックリンクで配置します。
$ ln -s /usr/i686-pc-mingw32/sys-root/mingw/bin/libgcc_s_sjlj-1.dll .
$ ln -s /usr/i686-pc-mingw32/sys-root/mingw/bin/libstdc++-6.dll .
$ ln -s /usr/i686-pc-mingw32/sys-root/mingw/bin/libpng14-14.dll .
$ ln -s /usr/i686-pc-mingw32/sys-root/mingw/bin/zlib1.dll .
$ ln -s /usr/i686-pc-mingw32/sys-root/mingw/bin/Qt*.dll
$ ln -s /usr/i686-pc-mingw32/sys-root/mingw/lib/libglee.dll .
$ ln -s /usr/i686-pc-mingw32/sys-root/mingw/lib/libBullet* .
$ ln -s /usr/i686-pc-mingw32/sys-root/mingw/lib/libLinearMath.dll .
$ ln -s /usr/i686-pc-mingw32/sys-root/mingw/lib/libMMD* .
$ rm *.a
$ wine QtMMDAI.exe

* プラグインについて

現在以下のプラグインが入っています。

** QMAAquesTalk2Plugin

音声合成ライブラリである AquesTalk2 を使って喋らせるプラグインです。
以下が利用可能です。喋らせる文字列は AquesTalk2 に渡す文字列と同様です。

- Command
-- MMDAI_AQTK2_START(喋らせる文字列)

** QMAAudioPlugin

BGM または SE を流すためのプラグインです。以下が利用可能です。
MMDAgent のコマンド及びイベントと互換性があります。

- Command
-- SOUND_START(エイリアス, ファイル名)
-- SOUND_STOP(エイリアス)
- Event
-- SOUND_EVENT_STOP

** QMAJuliusPlugin

音声認識エンジンである Julius を用いて音声認識を行うプラグインです。
以下が利用可能です。MMDAgent のコマンド及びイベントと互換性があります。

- EVENT
-- RECOG_EVENT_START
-- RECOG_EVENT_STOP

** QMALookAtPlugin

マウスのカーソルに合わせてモデルの顔が動くプラグインです。
キーボードの "L" を押すことによって有効無効を切り替えることが出来ます。

** QMAVILuaPlugin

Lua を用いてコマンド及びイベントを制御するプラグインです。
アプリケーションディレクトリの MMDAI.lua を読み込んで実行します。

Lua に以下の拡張が行われます。

- mmdai.command(command, arg1, ...)
コマンドを実行します。第一引数にコマンド名を渡します。必須です。
第二引数以降の引数は任意であり、可変です。

- mmdai.event(type, arg1, ...)
イベントを実行します。第一引数にイベント名を渡します。必須です。
第二引数以降の引数は任意であり、可変です。

- mmdai_handle_command(command, ...)
プラグインが呼び出すコマンドを取り扱うコールバック関数です。
第一引数にコマンド名が渡されます。第二引数に可変引数が入ります。

- mmdai_handle_event(event, ...)
プラグインが呼び出すイベントを取り扱うコールバック関数です。
第一引数にイベント名が渡されます。第二引数に可変引数が入ります。

mmdai.command 及び mmdai.event はすぐに実行されません。
関数の実行が終了してからはじめて実行されます。

** QMAVIManagerPlugin

MMDAgent の fst を取り扱ってイベント及びコマンドを制御するプラグインです。
アプリケーションディレクトリにある MMDAI.fst を読み込んで実行します。

* License
オリジナルのMMDAgentと同じく、修正BSDライセンスの元で配布されます。

* Authors
- original MMDAgent
Nagoya Institute of Technology Department of Computer Science

- from MMDAI
hkrn (Twitter:@hikarincl2)

