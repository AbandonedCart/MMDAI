uniform mat4 modelViewProjectionMatrix : WORLDVIEWPROJECTION < Object = "Camera"; >;
uniform mat4 lightViewProjectionMatrix : WORLDVIEWPROJECTION < Object = "Light"; >;
uniform mat4 normalMatrix              : WORLD;
uniform vec3 materialAmbient           : AMBIENT < Object = "Geometry"; >;
uniform vec4 materialDiffuse           : DIFFUSE < Object = "Geometry"; >;
uniform vec3 materialEmissive          : EMISSIVE < Object = "Geometry"; >;
uniform vec3 materialSpecular          : SPECULAR < Object = "Geometry"; >;
uniform float materialShininess        : SPECULARPOWER < Object = "Geometry"; >;
uniform vec3 lightAmbient              : AMBIENT < Object = "Light"; >;
uniform vec3 lightDiffuse              : DIFFUSE < Object = "Light"; >;
uniform vec3 lightSpecular             : SPECULAR < Object = "Light"; >;
uniform vec3 cameraPosition            : _POSITION < Object = "Camera"; >;
uniform vec3 lightDirection            : DIRECTION < Object = "Light"; >;
uniform vec4 edgeColor                 : EDGECOLOR;

uniform sampler2D mainSampler          : MATERIALTEXTURE;
uniform sampler2D toonSampler          : MATERIALTOONTEXTURE;
uniform sampler2D sphereSampler        : MATERIALSPHEREMAP;
uniform sampler2D depthSampler         : TEXUNIT0;

uniform bool use_texture;
uniform bool use_spheremap;
uniform bool spadd;
uniform bool spsub;

namespace vpvl2 {

SamplerState defaultSamplerState
{
    TEXTURE_MIN_FILTER = LINEAR;
    TEXTURE_MAG_FILTER = LINEAR;
}
SamplerState defaultToonSamplerState
{
    TEXTURE_MIN_FILTER = LINEAR;
    TEXTURE_MAG_FILTER = LINEAR;
    TEXTURE_WRAP_S = CLAMP_TO_EDGE;
    TEXTURE_WRAP_T = CLAMP_TO_EDGE;
}
SamplerState defaultDepthSamplerState
{
    TEXTURE_MIN_FILTER = NEAREST;
    TEXTURE_MAG_FILTER = NEAREST;
    TEXTURE_WRAP_S = CLAMP_TO_EDGE;
    TEXTURE_WRAP_T = CLAMP_TO_EDGE;
}

GLSLShader outputPositionSelfShadow {

#if __VERSION__ < 130
#define out varying
#endif

out vec4 vpvl2_outShadowPosition;

void outputPosition(const vec4 position) {
    vec4 newPosition = vec4(position.xyz, 1.0);
    vpvl2_outShadowPosition = lightViewProjectionMatrix * newPosition;
    gl_Position = modelViewProjectionMatrix * newPosition;
}

} /* outputPositionSelfShadow */

GLSLShader outputPositionZplot {

#if __VERSION__ < 130
#define out varying
#endif

out vec4 vpvl2_outPosition;

void outputPosition(const vec4 position) {
    vec4 result = lightViewProjectionMatrix * vec4(position.xyz, 1.0);
    vpvl2_outPosition = result;
    gl_Position = result;
}

} /* outputPositionZplot */

GLSLShader outputPosition {

void outputPosition(const vec4 position) {
    gl_Position = modelViewProjectionMatrix * vec4(position.xyz, 1.0);
}

} /* outputPosition */

GLSLShader applyTexture {

#if __VERSION__ < 130
#define in varying
#define texture(samp, uv) texture2D((samp), (uv))
#endif

in vec4 vpvl2_outTexCoord;
in vec4 vpvl2_outUVA1;

vec4 applyTexture(const vec4 color) {
    vec4 newColor = color;
    if (use_texture) {
        newColor *= texture(mainSampler, vpvl2_outTexCoord.xy);
    }
    if (use_spheremap) {
        if (spadd) {
            newColor.rgb += texture(sphereSampler, vpvl2_outTexCoord.zw).rgb;
        }
        else if (spsub) {
            newColor.rgb *= texture(sphereSampler, vpvl2_outUVA1.xy).rgb;
        }
        else {
            newColor.rgb *= texture(sphereSampler, vpvl2_outTexCoord.zw).rgb;
        }
    }
    return newColor;
}

} /* applyTexture */

GLSLShader noApplyTexture {

vec4 applyTexture(const vec4 color) {
     return color;
}

} /* noApplyTexture */

GLSLShader applyToon {

#if __VERSION__ < 130
#define texture(samp, uv) texture2D((samp), (uv))
#endif

const vec2 kToonTexCoord = vec2(0.0, 1.0);
const vec3 kWhiteColor = vec3(1.0);

vec4 applyToon(const vec4 color, const vec3 normal) {
    vec4 toonColorRGBA = texture(toonSampler, kToonTexCoord);
    vec3 toonColor = toonColorRGBA.rgb;
    float lightNormal = dot(normal, -lightDirection.xyz);
    float w = clamp(lightNormal * 16.0 + 0.5, 0.0, 1.0);
    return vec4(color.rgb * (toonColor + (kWhiteColor - toonColor) * vec3(w)), color.a);
}

} /* applyToon */

GLSLShader noApplyToon {

vec4 applyToon(const vec4 color, const vec3 normal) {
     return color;
}

} /* noApplyToon */

GLSLShader getShadowFactor {

#if __VERSION__ < 130
#define texture(samp, uv) texture2D((samp), (uv))
#endif

const float kEpsilonBias = 0.00001;

float getShadowFactor(const vec4 position) {
    vec4 shadowPosition = position / position.w;
    vec2 shadowCoord = vec2((shadowPosition.xy * 0.5) + 0.5);
#if 0 /* VSM */
    vec2 depthSample = texture(depthSampler, shadowCoord).rg;
    float sigma = depthSample.y - depthSample.x * depthSample.x + kEpsilonBias;
    float delta = depthSample.x - shadowPosition.z;
    float p = sigma / (sigma + (delta * delta));
    float shadowFactor = clamp(max(p, float((depthSample.x + kEpsilonBias) < shadowPosition.z)), 0.0, 1.0);
#else
    float depthSample = texture(depthSampler, shadowCoord).r;
    float shadowFactor = float((depthSample + kEpsilonBias) < shadowPosition.z);
#endif
    return shadowFactor;
}

} /* getShadowFactor */

GLSLShader applyToonSelfShadow {

#if __VERSION__ < 130
#define in varying
#define texture(samp, uv) texture2D((samp), (uv))
#endif

in vec4 vpvl2_outShadowPosition;
float getShadowFactor(const vec4 position);

vec4 applyToon(const vec4 color, const vec3 normal) {
    const vec2 kToonTexCoord = vec2(0.0, 1.0);
    vec4 toonColorRGBA = texture(toonSampler, kToonTexCoord);
    vec3 toonColor = toonColorRGBA.rgb;
    vec3 shadowColor = color.rgb * toonColor;
    return vec4(shadowColor + (color.rgb - shadowColor) * vec3(1.0 - getShadowFactor(vpvl2_outShadowPosition)), color.a);
}

} /* applyToonSelfShadow */

GLSLShader applySelfShadow {

#if __VERSION__ < 130
#define in varying
#endif

in vec4 vpvl2_outShadowPosition;

float getShadowFactor(const vec4 position);

vec4 applyToon(const vec4 color, const vec3 normal) {
    vec3 shadowColor = color.rgb * materialAmbient;
    return vec4(shadowColor + (color.rgb - shadowColor) * vec3(1.0 - getShadowFactor(vpvl2_outShadowPosition)), color.a);
}

} /* applySelfShadow */

GLSLShader mainObjectVS {

#if __VERSION__ < 130
#define in attribute
#define out varying
#endif
in vec3 vpvl2_inPosition;
in vec3 vpvl2_inNormal;
in vec2 vpvl2_inTexCoord;
in vec4 vpvl2_inUVA1;
out vec4 vpvl2_outColor;
out vec4 vpvl2_outTexCoord;
out vec4 vpvl2_outUVA1;
out vec3 vpvl2_outEyeView;
out vec3 vpvl2_outNormal;

void outputPosition(const vec4 position);

const vec2 kHalf2 = vec2(0.5);
const vec2 kOne2  = vec2(1.0);
const vec3 kZero3 = vec3(0.0);
const vec3 kOne3  = vec3(1.0);
const vec4 kZero4 = vec4(0.0);
const vec4 kOne4  = vec4(1.0);

void main() {
    vec4 position = vec4(vpvl2_inPosition, 1.0);
    vec3 normal = (normalMatrix * vec4(vpvl2_inNormal, 0)).xyz;
    vec3 ambient = clamp(materialAmbient * lightAmbient + materialEmissive, kZero3, kOne3);
    vec4 diffuse = clamp(materialDiffuse * vec4(lightDiffuse, 1.0), kZero4, kOne4);
    vpvl2_outEyeView = cameraPosition.xyz - vpvl2_inPosition;
    vpvl2_outNormal = vpvl2_inNormal;
    vpvl2_outColor = vec4(clamp(ambient + dot(vpvl2_inNormal, -lightDirection) * diffuse.rgb, kZero3, kOne3), diffuse.a);
    vpvl2_outTexCoord.xy = vpvl2_inTexCoord;
    vpvl2_outUVA1 = vpvl2_inUVA1;
    if (use_spheremap) {
        vpvl2_outTexCoord.zw = -normal.xy * kHalf2 + kHalf2;
    }
    else {
        vpvl2_outTexCoord.zw = kOne2 + vec2(dot(lightDirection.xyz, -normal)) * kHalf2;
    }
    outputPosition(position);
}

} /* GLSLShader mainObjectVS */

GLSLShader outputPixelColor {

#if __VERSION__ < 130
#define in varying
#define vpvl2_outPixelColor gl_FragColor
#else
out vec4 vpvl2_outPixelColor;
#endif
in vec4 vpvl2_outColor;
in vec3 vpvl2_outEyeView;
in vec3 vpvl2_outNormal;

vec4 applyTexture(const vec4 color);
vec4 applyToon(const vec4 color, const vec3 normal);

const vec3 kZero3 = vec3(0.0);
const vec3 kOne3  = vec3(1.0);

void outputPixelColor() {
    vec3 normal = normalize(vpvl2_outNormal);
    vec4 color = applyToon(applyTexture(vpvl2_outColor), normal);
    vec3 halfVector = normalize(normalize(vpvl2_outEyeView) - lightDirection);
    vec3 specular = clamp(materialSpecular * lightSpecular, kZero3, kOne3);
    float hdotn = max(dot(halfVector, normal), 0.0);
    color.rgb += specular * vec3(pow(hdotn, max(materialShininess, 1.0)));
    // color.a *= opacity;
    vpvl2_outPixelColor = color;
}

} /* outputPixelColor */


GLSLShader outputEdgeColor {

#if __VERSION__ < 130
#define vpvl2_outPixelColor gl_FragColor
#else
out vec4 vpvl2_outPixelColor;
#endif

void outputPixelColor() {
    vec4 color = edgeColor;
    // color.a *= opacity;
    vpvl2_outPixelColor = color;
}

} /* outputEdgeColor */

GLSLShader outputShadowColor {

#if __VERSION__ < 130
#define vpvl2_outPixelColor gl_FragColor
#else
out vec4 vpvl2_outPixelColor;
#endif

void outputPixelColor() {
    vec4 color = vec4(materialAmbient, materialDiffuse.a);
    // color.a *= opacity;
    vpvl2_outPixelColor = color;
}

} /* outputShadowColor */

GLSLShader outputZplot {

#if __VERSION__ < 130
#define in varying
#define vpvl2_outPixelColor gl_FragColor
#else
out vec4 vpvl2_outPixelColor;
#endif

in vec4 vpvl2_outPosition;

void outputPixelColor() {
    float depth = vpvl2_outPosition.z / vpvl2_outPosition.w;
    vec4 color = vec4(depth, depth * depth, 0, 1);
    // color.a *= opacity;
    vpvl2_outPixelColor = color;
}

} /* outputZplot */

GLSLShader mainObjectPS {

void outputPixelColor();

void main() {
    outputPixelColor();
}

} /* GLSLShader mainObjectPS */

GLSLShader mainEdgeVS {

#if __VERSION__ < 130
#define in attribute
#endif
in vec3 vpvl2_inPosition;

void outputPosition(const vec4 position);

void main() {
    vec4 position = vec4(vpvl2_inPosition, 1.0);
    outputPosition(position);
}

} /* GLSLShader mainEdgeVS */

GLSLShader mainZplotVS {

#if __VERSION__ < 130
#define in attribute
#endif
in vec3 vpvl2_inPosition;

void outputPosition(const vec4 position);

void main() {
    vec4 position = vec4(vpvl2_inPosition, 1.0);
    outputPosition(position);
}

} /* GLSLShader ZplotVS */

} /* namespace vpvl2 */

technique vpvl2_techniques_Object1 < MMDPass = "object"; UseTexture = 1; UseSphereMap = 1; UseToon = 1; > {
    pass DrawPass {
        SamplerState(mainSampler) = vpvl2::defaultSamplerState;
        SamplerState(sphereSampler) = vpvl2::defaultSamplerState;
        SamplerState(toonSampler) = vpvl2::defaultToonSamplerState;
        SamplerTexUnit(mainSampler) = 0;
        SamplerTexUnit(sphereSampler) = 1;
        SamplerTexUnit(toonSampler) = 2;
        VertexProgram = {
            vpvl2::outputPosition,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::applyTexture,
            vpvl2::applyToon,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_Object2 < MMDPass = "object"; UseTexture = 1; UseSphereMap = 0; UseToon = 1; > {
    pass DrawPass {
        SamplerState(mainSampler) = vpvl2::defaultSamplerState;
        SamplerState(toonSampler) = vpvl2::defaultToonSamplerState;
        SamplerTexUnit(mainSampler) = 0;
        SamplerTexUnit(toonSampler) = 2;
        VertexProgram = {
            vpvl2::outputPosition,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::applyTexture,
            vpvl2::applyToon,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_Object3 < MMDPass = "object"; UseTexture = 0; UseSphereMap = 1; UseToon = 1; > {
    pass DrawPass {
        SamplerState(sphereSampler) = vpvl2::defaultSamplerState;
        SamplerState(toonSampler) = vpvl2::defaultToonSamplerState;
        SamplerTexUnit(sphereSampler) = 1;
        SamplerTexUnit(toonSampler) = 2;
        VertexProgram = {
            vpvl2::outputPosition,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::applyTexture,
            vpvl2::applyToon,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_Object4 < MMDPass = "object"; UseTexture = 0; UseSphereMap = 0; UseToon = 1; > {
    pass DrawPass {
        SamplerState(toonSampler) = vpvl2::defaultToonSamplerState;
        SamplerTexUnit(toonSampler) = 2;
        VertexProgram = {
            vpvl2::outputPosition,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::noApplyTexture,
            vpvl2::applyToon,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_Object5 < MMDPass = "object"; UseTexture = 1; UseSphereMap = 1; UseToon = 0; > {
    pass DrawPass {
        SamplerState(mainSampler) = vpvl2::defaultSamplerState;
        SamplerState(sphereSampler) = vpvl2::defaultSamplerState;
        SamplerTexUnit(mainSampler) = 0;
        SamplerTexUnit(sphereSampler) = 1;
        VertexProgram = {
            vpvl2::outputPosition,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::applyTexture,
            vpvl2::noApplyToon,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_Object6 < MMDPass = "object"; UseTexture = 1; UseSphereMap = 0; UseToon = 0; > {
    pass DrawPass {
        SamplerState(mainSampler) = vpvl2::defaultSamplerState;
        VertexProgram = {
            vpvl2::outputPosition,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::applyTexture,
            vpvl2::noApplyToon,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_Object7 < MMDPass = "object"; UseTexture = 0; UseSphereMap = 1; UseToon = 0; > {
    pass DrawPass {
        SamplerState(sphereSampler) = vpvl2::defaultSamplerState;
        SamplerTexUnit(sphereSampler) = 1;
        VertexProgram = {
            vpvl2::outputPosition,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::applyTexture,
            vpvl2::applyToon,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_Object8 < MMDPass = "object"; UseTexture = 0; UseSphereMap = 0; UseToon = 0; > {
    pass DrawPass {
        VertexProgram = {
            vpvl2::outputPosition,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::noApplyTexture,
            vpvl2::noApplyToon,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_ObjectSS1 < MMDPass = "object_ss"; UseTexture = 1; UseSphereMap = 1; UseToon = 1; > {
    pass DrawPass {
        SamplerState(mainSampler) = vpvl2::defaultSamplerState;
        SamplerState(sphereSampler) = vpvl2::defaultSamplerState;
        SamplerState(toonSampler) = vpvl2::defaultToonSamplerState;
        SamplerState(depthSampler) = vpvl2::defaultDepthSamplerState;
        SamplerTexUnit(mainSampler) = 0;
        SamplerTexUnit(sphereSampler) = 1;
        SamplerTexUnit(toonSampler) = 2;
        SamplerTexUnit(depthSampler) = 3;
        VertexProgram = {
            vpvl2::outputPositionSelfShadow,
            vpvl2::mainObjectVS
        };
        FragmentProgram = { 
            vpvl2::applyTexture,
            vpvl2::getShadowFactor,
            vpvl2::applyToonSelfShadow,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_ObjectSS2 < MMDPass = "object_ss"; UseTexture = 1; UseSphereMap = 0; UseToon = 1; > {
    pass DrawPass {
        SamplerState(mainSampler) = vpvl2::defaultSamplerState;
        SamplerState(toonSampler) = vpvl2::defaultToonSamplerState;
        SamplerState(depthSampler) = vpvl2::defaultDepthSamplerState;
        SamplerTexUnit(mainSampler) = 0;
        SamplerTexUnit(toonSampler) = 2;
        SamplerTexUnit(depthSampler) = 3;
        VertexProgram = {
            vpvl2::outputPositionSelfShadow,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::applyTexture,
            vpvl2::getShadowFactor,
            vpvl2::applyToonSelfShadow,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_ObjectSS3 < MMDPass = "object_ss"; UseTexture = 0; UseSphereMap = 1; UseToon = 1; > {
    pass DrawPass {
        SamplerState(sphereSampler) = vpvl2::defaultSamplerState;
        SamplerState(toonSampler) = vpvl2::defaultToonSamplerState;
        SamplerState(depthSampler) = vpvl2::defaultDepthSamplerState;
        SamplerTexUnit(sphereSampler) = 1;
        SamplerTexUnit(toonSampler) = 2;
        SamplerTexUnit(depthSampler) = 3;
        VertexProgram = {
            vpvl2::outputPositionSelfShadow,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::applyTexture,
            vpvl2::getShadowFactor,
            vpvl2::applyToonSelfShadow,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_ObjectSS4 < MMDPass = "object_ss"; UseTexture = 0; UseSphereMap = 0; UseToon = 1; > {
    pass DrawPass {
        SamplerState(toonSampler) = vpvl2::defaultToonSamplerState;
        SamplerState(depthSampler) = vpvl2::defaultDepthSamplerState;
        SamplerTexUnit(toonSampler) = 2;
        SamplerTexUnit(depthSampler) = 3;
        VertexProgram = {
            vpvl2::outputPositionSelfShadow,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::noApplyTexture,
            vpvl2::getShadowFactor,
            vpvl2::applyToonSelfShadow,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_ObjectSS5 < MMDPass = "object_ss"; UseTexture = 1; UseSphereMap = 1; UseToon = 0; > {
    pass DrawPass {
        SamplerState(mainSampler) = vpvl2::defaultSamplerState;
        SamplerState(sphereSampler) = vpvl2::defaultSamplerState;
        SamplerState(depthSampler) = vpvl2::defaultDepthSamplerState;
        SamplerTexUnit(mainSampler) = 0;
        SamplerTexUnit(sphereSampler) = 1;
        SamplerTexUnit(depthSampler) = 3;
        VertexProgram = {
            vpvl2::outputPositionSelfShadow,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::applyTexture,
            vpvl2::getShadowFactor,
            vpvl2::applySelfShadow,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_ObjectSS6 < MMDPass = "object_ss"; UseTexture = 1; UseSphereMap = 0; UseToon = 0; > {
    pass DrawPass {
        SamplerState(mainSampler) = vpvl2::defaultSamplerState;
        SamplerState(depthSampler) = vpvl2::defaultDepthSamplerState;
        SamplerTexUnit(mainSampler) = 0;
        SamplerTexUnit(depthSampler) = 3;
        VertexProgram = {
            vpvl2::outputPositionSelfShadow,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::applyTexture,
            vpvl2::getShadowFactor,
            vpvl2::applySelfShadow,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_ObjectSS7 < MMDPass = "object_ss"; UseTexture = 0; UseSphereMap = 1; UseToon = 0; > {
    pass DrawPass {
        SamplerState(sphereSampler) = vpvl2::defaultSamplerState;
        SamplerState(depthSampler) = vpvl2::defaultDepthSamplerState;
        SamplerTexUnit(sphereSampler) = 1;
        SamplerTexUnit(depthSampler) = 3;
        VertexProgram = {
            vpvl2::outputPositionSelfShadow,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::applyTexture,
            vpvl2::getShadowFactor,
            vpvl2::applySelfShadow,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_ObjectSS8 < MMDPass = "object_ss"; UseTexture = 0; UseSphereMap = 0; UseToon = 0; > {
    pass DrawPass {
        SamplerState(depthSampler) = vpvl2::defaultDepthSamplerState;
        SamplerTexUnit(depthSampler) = 3;
        VertexProgram = {
            vpvl2::outputPositionSelfShadow,
            vpvl2::mainObjectVS
        };
        FragmentProgram = {
            vpvl2::noApplyTexture,
            vpvl2::getShadowFactor,
            vpvl2::applySelfShadow,
            vpvl2::mainObjectPS
        };
        FragmentProgram<"color"> = vpvl2::outputPixelColor;
    }
}

technique vpvl2_techniques_Edge < MMDPass = "edge"; > {
    pass DrawPass {
        VertexProgram = {
            vpvl2::outputPosition,
            vpvl2::mainEdgeVS
        };
        FragmentProgram = vpvl2::mainObjectPS;
        FragmentProgram<"color"> = vpvl2::outputEdgeColor;
    }
}

technique vpvl2_techniques_Shadow < MMDPass = "shadow"; > {
    pass DrawPass {
        VertexProgram = {
            vpvl2::outputPosition,
            vpvl2::mainEdgeVS
        };
        FragmentProgram = vpvl2::mainObjectPS;
        FragmentProgram<"color"> = vpvl2::outputShadowColor;
    }
}

technique vpvl2_techniques_Zplot < MMDPass = "zplot"; > {
    pass DrawPass {
        VertexProgram = {
            vpvl2::outputPositionZplot,
            vpvl2::mainZplotVS
        };
        FragmentProgram = vpvl2::mainObjectPS;
        FragmentProgram<"color"> = vpvl2::outputZplot;
    }
}
