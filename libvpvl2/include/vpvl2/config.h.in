/**

 Copyright (c) 2010-2013  hkrn

 All rights reserved.

 Redistribution and use in source and binary forms, with or
 without modification, are permitted provided that the following
 conditions are met:

 - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
 - Redistributions in binary form must reproduce the above
   copyright notice, this list of conditions and the following
   disclaimer in the documentation and/or other materials provided
   with the distribution.
 - Neither the name of the MMDAI project team nor the names of
   its contributors may be used to endorse or promote products
   derived from this software without specific prior written
   permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.

*/

/* This file is automatically generated by CMake and all changes will be lost */
#pragma once
#ifndef VPVL2_CONFIG_H_
#define VPVL2_CONFIG_H_

/* OS is Windows */
#cmakedefine VPVL2_OS_WINDOWS

/* OS is OSX */
#cmakedefine VPVL2_OS_OSX

/* OS is Linux */
#cmakedefine VPVL2_OS_LINUX

/* OS is iOS */
#cmakedefine VPVL2_OS_IOS

/* OS is Android (Linux) */
#cmakedefine VPVL2_OS_ANDROID

/* Build libvpvl2 with OpenGL support */
#cmakedefine VPVL2_ENABLE_OPENGL

/* use OpenGL coordinate system */
#cmakedefine VPVL2_COORDINATE_OPENGL

/* Build libvpvl2 with Open Asset Import Library 3.x */
#cmakedefine VPVL2_LINK_ASSIMP3

/* Build libvpvl2 with Open Asset Import Library 2.x */
#cmakedefine VPVL2_LINK_ASSIMP

/* Build libvpvl2's renderer with NVIDIA Cg based rendering engines */
#cmakedefine VPVL2_ENABLE_NVIDIA_CG

/* Link libvpvl2 against GLEW */
#cmakedefine VPVL2_LINK_GLEW

/* Link libvpvl2 against Qt */
#cmakedefine VPVL2_LINK_QT

/* Build libvpvl2 with OpenCL support */
#cmakedefine VPVL2_ENABLE_OPENCL

/* Build libvpvl2 with OpenGL ES2 support */
#cmakedefine VPVL2_ENABLE_GLES2

/* Build libvpvl2 with OpenMP support */
#cmakedefine VPVL2_ENABLE_OPENMP

/* Build libvpvl2 with Offscreen Mesa3D driver */
#cmakedefine VPVL2_ENABLE_OSMESA

/* Link libvpvl2 against libvpvl */
#cmakedefine VPVL2_LINK_VPVL

/* Link libvpvl2 against Intel Threading Building Blocks */
#cmakedefine VPVL2_LINK_INTEL_TBB

/* Link libvpvl2 against SFML */
#cmakedefine VPVL2_LINK_SFML

/* Link libvpvl2 against Google Glog */
#cmakedefine VPVL2_LINK_GLOG

/* Link libvpvl2 against Regal */
#cmakedefine VPVL2_LINK_REGAL

/* Link libvpvl2 against nvFX */
#cmakedefine VPVL2_LINK_NVFX

/* Link libvpvl2 against AntTweakBar */
#cmakedefine VPVL2_LINK_ATB

/* Link libvpvl2 against FreeImage */
#cmakedefine VPVL2_LINK_FREEIMAGE

/* Link libvpvl2 against Allegro5 */
#cmakedefine VPVL2_LINK_ALLEGRO5

/* Link libvpvl2 against EGL */
#cmakedefine VPVL2_LINK_EGL

/* Platform is Emscripten */
#cmakedefine VPVL2_PLATFORM_EMSCRIPTEN

/* Platform is Raspberry Pi */
#cmakedefine VPVL2_PLATFORM_RASPBERRY_PI

/* Build library as dynamic library */
#cmakedefine BUILD_SHARED_LIBS

/* Enable archive class extension */
#cmakedefine VPVL2_ENABLE_EXTENSIONS_ARCHIVE

/* Enable effect class extension */
#cmakedefine VPVL2_ENABLE_EXTENSIONS_EFFECT

/* Enable project class extension */
#cmakedefine VPVL2_ENABLE_EXTENSIONS_PROJECT

/* Enable application context class extension */
#cmakedefine VPVL2_ENABLE_EXTENSIONS_APPLICATIONCONTEXT

/* Enable ICU based string class extension */
#cmakedefine VPVL2_ENABLE_EXTENSIONS_STRING

/* Enable Bullet Physics world class extension extension */
#cmakedefine VPVL2_ENABLE_EXTENSIONS_WORLD

/* Enable debug annotations using GL_KHR_debug extension support such as apitrace */
#cmakedefine VPVL2_ENABLE_DEBUG_ANNOTATIONS

/* Has GNU GCC style compiler TLS (Thread Local Storage) support */
#cmakedefine VPVL2_HAS_STATIC_TLS_GNU

/* Has MSVC style compiler TLS (Thread Local Storage) support */
#cmakedefine VPVL2_HAS_STATIC_TLS_MSVC

/* Has OpenGL GLX component? */
#cmakedefine VPVL2_HAS_OPENGL_GLX

#cmakedefine VPVL2_HAS_CXX11_DECL_FINAL

#cmakedefine VPVL2_HAS_CXX11_DECL_CONSTEXPR

#cmakedefine VPVL2_HAS_CXX11_DECL_NOEXCEPT

#cmakedefine VPVL2_HAS_CXX11_DECL_THREAD_LOCAL

/* version */
#define VPVL2_VERSION_MAJOR @VPVL2_VERSION_MAJOR@
#define VPVL2_VERSION_COMPAT @VPVL2_VERSION_COMPAT@
#define VPVL2_VERSION_MINOR @VPVL2_VERSION_MINOR@

#define VPVL2_MAKE_VERSION(major, compat, minor) \
    (((major) << 16) | ((compat) << 8) | (minor))
#define VPVL2_VERSION VPVL2_MAKE_VERSION(VPVL2_VERSION_MAJOR, \
    VPVL2_VERSION_COMPAT, \
    VPVL2_VERSION_MINOR)

#define VPVL2_VERSION_STRING "@VPVL2_VERSION@"
#define VPVL2_COMMIT_REVISION "$Id$"

/* _MSC_VER < 1300 (= Visual Studio 6) doesn't support */
#if (defined(_MSC_VER) && _MSC_VER < 1600)
#ifndef _MSC_STDINT_H_
typedef signed __int8 int8_t;
typedef unsigned __int8 uint8_t;
typedef signed __int16 int16_t;
typedef unsigned __int16 uint16_t;
typedef signed __int32 int32_t;
typedef unsigned __int32 uint32_t;
typedef signed __int64 int64_t;
typedef unsigned __int64 uint64_t;
#define _MSC_STDINT_H_
#endif /* _MSC_STDINT_H_ */
#else
#include <stdint.h>
/* SIZE_MAX is C99 macro and use alternative (32bit) if not defined */
#ifndef SIZE_MAX
#define SIZE_MAX 4294967295U
#endif
#endif /* (defined(_MSC_VER) && _MSC_VER < 1600) */

#if defined (VPVL2_OS_WINDOWS)
#if defined(vpvl2_EXPORTS)
#define VPVL2_API __declspec(dllexport)
#elif defined(BUILD_SHARED_LIBS)
#define VPVL2_API __declspec(dllimport)
#else
#define VPVL2_API
#endif /* defined(vpvl2_EXPORTS) */
#else /* defined (VPVL2_OS_WINDOWS) */
#if defined(__GNUC__) && __GNUC__ >= 4
#define VPVL2_API __attribute__ ((visibility("default")))
#else
#define VPVL2_API
#endif /* defined(__GNUC__) && __GNUC__ >= 4 */
#endif

#if defined(VPVL2_ENABLE_QT)
#include <QLoggingCategory>
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
#ifdef __clang__
#pragma clang diagnostic push
#endif
inline QDebug operator<< (QDebug &o, const std::string &string) {
    o << string.c_str();
    return o;
}
namespace vpvl2 {
#undef ERROR
static const int INFO = 0;
static const int WARNING = 1;
static const int ERROR = 2;
VPVL2_API QLoggingCategory &findLoggingBasicCategory(int level);
VPVL2_API QLoggingCategory &findLoggingVerboseCategory(int level);
}
#define VPVL2_LOG(level, expr) qCDebug(vpvl2::findLoggingBasicCategory(level)).nospace() << expr
#define VPVL2_VLOG(level, expr) qCDebug(vpvl2::findLoggingVerboseCategory(level)).nospace() << expr
#define VPVL2_CHECK(assertion) Q_ASSERT(assertion)
#ifndef NDEBUG
#define VPVL2_DLOG(level, expr) qCDebug(vpvl2::findLoggingBasicCategory(level)).nospace() << expr
#define VPVL2_DVLOG(level, expr) qCDebug(vpvl2::findLoggingVerboseCategory(level)).nospace() << expr
#define VPVL2_DCHECK(assertion) Q_ASSERT(assertion)
#define VPVL2_DCHECK_NOTNULL(assertion) Q_ASSERT((assertion) != 0)
#define VPVL2_DCHECK_GT(expected, actual) Q_ASSERT((expected) > (actual))
#else
#define VPVL2_DLOG(level, expr)
#define VPVL2_DVLOG(level, expr)
#define VPVL2_DCHECK(assertion)
#define VPVL2_DCHECK_NOTNULL(assertion)
#define VPVL2_DCHECK_GT(expected, actual)
#endif /* NDEBUG */
#elif defined(VPVL2_LINK_GLOG)
#ifdef VPVL2_OS_WINDOWS
#define GLOG_NO_ABBREVIATED_SEVERITIES
#define GOOGLE_GLOG_DLL_DECL
#endif /* VPVL2_OS_WINDOWS */
#include <glog/logging.h>
#define VPVL2_LOG(level, expr) LOG(level) << expr
#define VPVL2_VLOG(level, expr) VLOG(level) << expr
#define VPVL2_CHECK(assertion) CHECK(assertion)
#ifndef NDEBUG
#define VPVL2_DLOG(level, expr) LOG(level) << expr
#define VPVL2_DVLOG(level, expr) DVLOG(level) << expr
#define VPVL2_DCHECK(assertion) DCHECK(assertion)
#define VPVL2_DCHECK_NOTNULL(assertion) DCHECK_NOTNULL(assertion)
#define VPVL2_DCHECK_GT(expected, actual) DCHECK_GT(expected, actual)
#else
#define VPVL2_DLOG(level, expr)
#define VPVL2_DVLOG(level, expr)
#define VPVL2_DCHECK(assertion)
#define VPVL2_DCHECK_NOTNULL(assertion)
#define VPVL2_DCHECK_GT(expected, actual)
#endif /* NDEBUG */
#else /* VPVL2_LINK_GLOG */
#define VPVL2_LOG(level, expr)
#define VPVL2_VLOG(level, expr)
#define VPVL2_CHECK(assertion)
#define VPVL2_DLOG(level, expr)
#define VPVL2_DVLOG(level, expr)
#define VPVL2_DCHECK(assertion)
#define VPVL2_DCHECK_NOTNULL(assertion)
#define VPVL2_DCHECK_GT(expected, actual)
#endif /* VPVL2_LINK_GLOG */

#ifdef VPVL2_HAS_CXX11_DECL_FINAL
#define VPVL2_DECL_FINAL final
#else
#define VPVL2_DECL_FINAL
#endif /* VPVL2_HAS_CXX11_DECL_FINAL */

#ifdef VPVL2_HAS_CXX11_DECL_CONSTEXPR
#define VPVL2_DECL_CONSTEXPR constexpr
#else
#define VPVL2_DECL_CONSTEXPR
#endif /* VPVL2_HAS_CXX11_DECL_CONSTEXPR */

#ifdef VPVL2_HAS_CXX11_DECL_NOEXCEPT
#define VPVL2_DECL_NOEXCEPT noexcept
#define VPVL2_DECL_NOEXCEPT_EXPR(expr) noexcept(expr)
#else
#define VPVL2_DECL_NOEXCEPT
#define VPVL2_DECL_NOEXCEPT_EXPR(expr)
#endif /* VPVL2_HAS_CXX11_DECL_NOEXCEPT */

#if defined(VPVL2_HAS_CXX11_DECL_THREAD_LOCAL)
#define VPVL2_DECL_TLS thread_local
#elif defined(VPVL2_HAS_STATIC_TLS_GNU)
#define VPVL2_DECL_TLS __thread
#elif defined(VPVL2_HAS_STATIC_TLS_MSVC)
#define VPVL2_DECL_TLS __declspec(thread)
#else
#define VPVL2_DECL_TLS
#endif /* VPVL2_HAS_CXX11_DECL_THREAD_LOCAL */

#define VPVL2_DISABLE_COPY_AND_ASSIGN(TypeName) \
    TypeName(const TypeName &); \
    void operator=(const TypeName &);

#define VPVL2_MAKE_STATIC_CLASS(TypeName) \
    TypeName(); \
    ~TypeName(); \
    VPVL2_DISABLE_COPY_AND_ASSIGN(TypeName)

#endif
